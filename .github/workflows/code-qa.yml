# SPDX-FileCopyrightText: Copyright DB InfraGO AG
# SPDX-License-Identifier: CC0-1.0

name: Code QA

on:
  pull_request:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  workflow_dispatch:

jobs:
  test:
    name: Test with Python ${{matrix.python_version}} on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python_version:
          - "3.10"
          - "3.11"
          - "3.12"
        include:
          - os: windows-latest
            python_version: "3.10"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{matrix.python_version}}
        uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: pyproject.toml
          python-version: ${{matrix.python_version}}
      - name: Upgrade Pip
        run: python -m pip install -U pip
      - name: Install test dependencies
        run: python -m pip install '.[test]'
      - name: Run unit tests
        run: python -m pytest --cov-report=term --cov=capellambse --rootdir=.

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: pyproject.toml
          python-version: "3.12"
      - name: Upgrade pip
        run: python -m pip install -U pip
      - name: Install pre-commit
        run: python -m pip install 'pre-commit'
      - name: Run Pre-Commit
        run: pre-commit run --all-files

  build:
    name: Build wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: pyproject.toml
          python-version: "3.12"
      - name: Install dependencies
        run: python -m pip install -U pip build twine
      - name: Build packages
        run: python -m build
      - name: Verify packages
        run: python -m twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error
      - name: Push to release branch
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        env:
          GITHUB_REF: ${{github.ref}}
        run: |-
          releasever="$(echo "$GITHUB_REF" | grep -Po '(?<=^refs/tags/v)(?:0\.)?[1-9][0-9]*').x"
          if [[ "$releasever" = 0.5.x ]]; then releasever="${releasever%.x}"; fi
          git push origin "HEAD:release-$releasever"
  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test, example-notebooks]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/capellambse
    permissions:
      id-token: write
    steps:
      - name: Download built wheel
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  example-notebooks:
    name: Run and verify the example notebooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: pyproject.toml
          python-version: "3.12"
      - name: Upgrade pip
        run: python -m pip install -U pip
      - name: Install dependencies
        run: python -m pip install jupyter '.[docs,png]' capellambse-context-diagrams
      - name: Run example notebooks
        run: |
          jq --version
          set -o pipefail
          ok=true
          function celloutputs() {
            jq -r '.cells[] | select(.cell_type=="code") | .outputs[] | (.text, .data["text/plain"]) | .[]?' < "$1" |
              grep -v '^$' |
              sed -e 's/ at 0x[0-9a-fA-F]\+/ at 0x0/'
          }
          for file in docs/source/examples/*.ipynb; do
            # Requirement notebook creates objects, which will get randomized UUIDs
            if [[ "${file##*/}" = "06 Introduction to Requirement access and management.ipynb" ]]; then continue; fi

            old_outputs="$(celloutputs "$file")"
            if ! jupyter nbconvert --to notebook --execute "$file" --output "${file##*/}" --ExecutePreprocessor.timeout "${NOTEBOOK_TIMEOUT_SEC:-300}"; then
              ok=false
              continue
            fi
            new_outputs="$(celloutputs "$file")"
            diff -u3 <(echo "$old_outputs") <(echo "$new_outputs") || ok=false
          done
          $ok

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    needs: [example-notebooks]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: pyproject.toml
          python-version: "3.12"
      - name: Upgrade pip
        run: python -m pip install -U pip
      - name: Install dependencies
        run: |
          sudo apt-get install -y pandoc
          python -m pip install '.[docs]'
      - name: Auto-generate APIDOC sources
        run: make -C docs apidoc
      - name: Create docs
        env:
          SPHINXOPTS: ${{ github.ref != 'refs/heads/master' && '-W' || '' }}
        run: make -C docs html
      - name: Upload built docs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: docs/build/html
          if-no-files-found: error
          retention-days: 5
      - name: Deploy
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          force_orphan: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build/html
