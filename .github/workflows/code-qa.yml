# SPDX-FileCopyrightText: Copyright DB InfraGO AG
# SPDX-License-Identifier: CC0-1.0

name: Code QA

on:
  pull_request:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref_type == 'tag' && github.sha || '0' }}
  cancel-in-progress: true

jobs:
  pre-commit: # {{{1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          python-version: "3.12"
      - name: Run Pre-Commit
        run: uv run pre-commit run --all-files

  sdist: # {{{1
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          python-version: "3.13"
      - name: Package the sources
        run: |-
          uv build --sdist --out-dir wheelhouse/
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: wheelhouse/
          if-no-files-found: error

  build: # {{{1
    name: Build wheel for ${{matrix.os}} / ${{matrix.arch}}${{ matrix.manylinux && ' / ' || '' }}${{ matrix.manylinux || '' }}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux manylinux {{{
          - os: ubuntu-latest
            arch: x86_64
            manylinux: manylinux
          - os: ubuntu-24.04-arm
            arch: aarch64
            manylinux: manylinux
          # }}}
          # Linux musllinux {{{
          - os: ubuntu-latest
            arch: x86_64
            manylinux: musllinux
          - os: ubuntu-24.04-arm
            arch: aarch64
            manylinux: musllinux
          # }}}
          # macOS {{{
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
          # }}}
          # Windows {{{
          - os: windows-latest
            arch: x86
          - os: windows-latest
            arch: AMD64
          # }}}
    env:
      CIBW_ARCHS: ${{matrix.arch}}
      CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
      CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
      MACOSX_DEPLOYMENT_TARGET: '10.13'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine which Python versions to test against
        shell: bash
        env:
          ENV_TAG: ${{runner.os}}-${{matrix.arch}}-${{matrix.manylinux}}
          MANYLINUX: ${{matrix.manylinux}}
        run: |-
          if [[ "$ENV_TAG" == "Linux-x86_64-manylinux" || "$ENV_TAG" == "macOS-arm64-" ]]; then
            echo "CIBW_BUILD=cp*-$MANYLINUX*" >> $GITHUB_ENV
          else
            echo "CIBW_BUILD=cp310-$MANYLINUX* cp313-$MANYLINUX*" >> $GITHUB_ENV
          fi
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{runner.os}}-${{matrix.arch}}${{ matrix.manylinux && '-' || '' }}${{ matrix.manylinux || '' }}
          path: wheelhouse/
          if-no-files-found: error

  build-pure: # {{{1
    name: Build pure-Python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          python-version: "3.13"
      - name: Build the wheel
        run: |-
          export SETUPTOOLS_SCM_PRETEND_VERSION="$(
            uvx --with setuptools_scm python -c \
              "import setuptools_scm as scm; print(scm.get_version())"
          )"

          uvx --with tomli_w python <<EOF
          import tomllib, tomli_w
          with open("pyproject.toml", "rb") as f:
            metadata = tomllib.load(f)
          del metadata["tool"]["setuptools-rust"]
          with open("pyproject.toml", "wb") as f:
            tomli_w.dump(metadata, f)
          EOF

          uv build --wheel --out-dir wheelhouse/
      - name: Run unittests
        run: |-
          echo "::group::Prepare test environment"
          uv sync --group test --no-install-project
          . .venv/bin/activate
          uv pip install wheelhouse/*.whl
          echo "::endgroup::"

          coverage run
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{runner.os}}-pure
          path: wheelhouse/
          if-no-files-found: error

  publish: # {{{1
    name: Publish release
    runs-on: ubuntu-latest
    needs: [build, build-pure, example-notebooks]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/capellambse
    permissions:
      id-token: write
    steps:
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          path: dist/
          name: sdist
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheel-*
          merge-multiple: true
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Push to release branch
        continue-on-error: true
        env:
          GITHUB_REF: ${{github.ref}}
        run: |-
          releasever="$(echo "$GITHUB_REF" | grep -Po '(?<=^refs/tags/v)(?:0\.)?[1-9][0-9]*').x"
          if [[ "$releasever" = 0.5.x ]]; then releasever="${releasever%.x}"; fi
          git push origin "HEAD:release-$releasever"

  example-notebooks: # {{{1
    name: Run and verify the example notebooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          python-version: "3.12"
      - name: Run example notebooks
        run: make -C docs verify-examples

  docs: # {{{1
    name: Build documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          python-version: "3.12"
      - name: Install system-level dependencies
        run: sudo apt-get install -y pandoc
      - name: Auto-generate APIDOC sources
        run: make -C docs apidoc
      - name: Create docs
        env:
          SPHINXOPTS: ''
        run: make -C docs html
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          force_orphan: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build/html

# vim:set fdm=marker:
